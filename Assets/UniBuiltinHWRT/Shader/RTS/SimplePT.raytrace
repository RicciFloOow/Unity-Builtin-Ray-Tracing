#include "UnityShaderVariables.cginc"
#include "../Lib/BuiltinHWRTHelperLib.cginc"

float _Zoom;//Mathf.Tan(Mathf.Deg2Rad * Camera.main.fieldOfView * 0.5f)

TextureCube<float4> _SkyboxCubeTex;

RWTexture2D<float4> RW_ResultRT;

SamplerState sampler_LinearClamp;

#pragma max_recursion_depth 8

[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{
    //optional: draw procedural skybox
    float3 col = _SkyboxCubeTex.SampleLevel(sampler_LinearClamp, WorldRayDirection(), 0).xyz;
	rayPayload.color = col;
}

[shader("raygeneration")]
void BuiltinRaygenShader()
{
	uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    uint pixelIndex = launchIndex.y * launchDim.x + launchIndex.x;
    uint seed = pixelIndex + _RTCurrentFrame * 114514;

    float2 frameCoord = float2(launchIndex.x, launchIndex.y) + float2(pcgHash(seed), pcgHash(seed));//very simple aa

    float2 ndcCoords = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);

    ndcCoords = ndcCoords * 2 - 1;
    ndcCoords = ndcCoords * _Zoom;

    float aspectRatio = (float)launchDim.x / (float)launchDim.y;
    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, 1));
    float3 rayDirection = normalize(mul((float3x3)unity_CameraToWorld, viewDirection));

    RayDesc ray;
    ray.Origin    = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin      = _ProjectionParams.y;
    ray.TMax      = _ProjectionParams.z;

    RayPayload payload;
    payload.color = 0;
    payload.bounceTimes = 0;
    payload.randomSeed = seed;

    uint missShaderIndex = 0;
    TraceRay(_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
    float3 finalColor = payload.color;
    if (_RTCurrentFrame > 1)
    {
        float a = 1.0f / (float)_RTCurrentFrame;
        finalColor = RW_ResultRT[launchIndex] * (1.0f - a) + finalColor * a;
    }
    RW_ResultRT[launchIndex] = float4(finalColor, 1);
}
